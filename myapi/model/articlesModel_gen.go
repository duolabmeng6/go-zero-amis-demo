// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articlesFieldNames          = builder.RawFieldNames(&Articles{})
	articlesRows                = strings.Join(articlesFieldNames, ",")
	articlesRowsExpectAutoSet   = strings.Join(stringx.Remove(articlesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	articlesRowsWithPlaceHolder = strings.Join(stringx.Remove(articlesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	articlesModel interface {
		Insert(ctx context.Context, data *Articles) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Articles, error)
		Update(ctx context.Context, data *Articles) error
		Delete(ctx context.Context, id int64) error
	}

	defaultArticlesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Articles struct {
		Id        int64          `db:"id"`
		Title     sql.NullString `db:"title"`
		Content   sql.NullString `db:"content"`
		CreatedAt sql.NullTime   `db:"created_at"`
		UpdatedAt sql.NullTime   `db:"updated_at"`
	}
)

func newArticlesModel(conn sqlx.SqlConn) *defaultArticlesModel {
	return &defaultArticlesModel{
		conn:  conn,
		table: "`articles`",
	}
}

func (m *defaultArticlesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultArticlesModel) FindOne(ctx context.Context, id int64) (*Articles, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articlesRows, m.table)
	var resp Articles
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticlesModel) Insert(ctx context.Context, data *Articles) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, articlesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Content)
	return ret, err
}

func (m *defaultArticlesModel) Update(ctx context.Context, data *Articles) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, articlesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.Content, data.Id)
	return err
}

func (m *defaultArticlesModel) tableName() string {
	return m.table
}
